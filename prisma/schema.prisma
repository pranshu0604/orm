generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  clerkId         String    @unique
  email           String    @unique
  name            String?
  image           String?
  createdAt       DateTime  @default(now())
  platforms       PlatformConnection[]
  reports         PerformanceReport[]
}

model PlatformConnection {
  id              String       @id @default(cuid())
  user            User         @relation(fields: [userId], references: [id])
  userId          String
  platform        PlatformType
  profileId       String       // Platform's unique user ID (essential)
  username        String?      // Store username fetched during connection (optional)
  accessToken     String?      // Encrypted, store only if needed for future API calls
  refreshToken    String?      // Encrypted, store only if needed (e.g., GitHub for specific actions)
  scopes          String?      // Scopes granted during OAuth
  expiresAt       DateTime?    // Access token expiry time (less relevant if not using token)
  connectedAt     DateTime     @default(now())
  posts           Post[]

  @@unique([userId, platform])
}

enum PlatformType {
  X
  GITHUB
  // add linkedin and insta later
}

model Post {
  id              String   @id @default(cuid())
  platformConn    PlatformConnection @relation(fields: [platformConnId], references: [id])
  platformConnId  String
  postId          String   // actual platform post ID
  url             String
  content         String?
  postedAt        DateTime
  metrics         Metric?  @relation(name: "PostMetric")
  sentiment       Sentiment? @relation(name: "PostSentiment")

  @@unique([platformConnId, postId])
}

model Metric {
  id              String   @id @default(cuid())
  post            Post     @relation(name: "PostMetric", fields: [postId], references: [id])
  postId          String   @unique
  likes           Int?
  comments        Int?
  shares          Int?
  views           Int?
  stars           Int?
  profileClicks   Int?
}

model Sentiment {
  id              String   @id @default(cuid())
  post            Post     @relation(name: "PostSentiment", fields: [postId], references: [id])
  postId          String   @unique
  score           Float
  label           String
  keywords        String[]
}

model PerformanceReport {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  generatedAt     DateTime @default(now())
  content         String
  score           Int
  suggestions     String[]
}